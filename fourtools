# fourtools, made by fourtech :3

import subprocess
import time
import os
import sys
import select

COLORS = {
    'reset': '\033[0m',
    'bold': '\033[1m',
    'dim': '\033[2m',
    'cyan': '\033[96m',
    'green': '\033[92m',
    'yellow': '\033[93m',
    'red': '\033[91m',
    'gray': '\033[90m',
    'white': '\033[97m',
    'blue': '\033[94m',
}

show_sensitive = False

def color(text, color_name):
    return f"{COLORS.get(color_name, '')}{text}{COLORS['reset']}"

def clear_screen():
    os.system('clear')

def print_header():
    print("\n")
    print(color("  ‚óè  ‚óè", 'gray'))
    print("\n")

def check_device():
    try:
        result = subprocess.run(['idevice_id', '-l'], 
                              capture_output=True, 
                              text=True, 
                              timeout=2)
        return result.stdout.strip() != ""
    except:
        return False

def get_device_info(key):
    try:
        result = subprocess.run(['ideviceinfo', '-k', key], 
                              capture_output=True, 
                              text=True, 
                              timeout=5)
        value = result.stdout.strip()
        return value if value else "Unknown"
    except:
        return "Unknown"

def mask_string(s):
    if s == "Unknown" or len(s) <= 3:
        return s
    return s[0] + '*' * (len(s) - 2) + s[-1]

def format_storage(bytes_str):
    try:
        bytes_val = int(bytes_str)
        gb = bytes_val / 1_000_000_000
        return f"{int(gb)}GB"
    except:
        return "Unknown"

def format_memory():
    try:
        total_capacity = get_device_info("TotalDiskCapacity")
        total_data = get_device_info("TotalDataCapacity")
        
        if total_capacity != "Unknown":
            total_gb = int(total_capacity) // 1_000_000_000
            return f"{total_gb}GB"
        elif total_data != "Unknown":
            data_gb = int(total_data) // 1_000_000_000
            return f"{data_gb}GB"
        
        product_type = get_device_info("ProductType")
        if "iPhone" in product_type:
            model_mapping = {
                "iPhone12,8": "64GB",
                "iPhone13,1": "64GB",
                "iPhone13,2": "64GB",
                "iPhone13,3": "128GB",
                "iPhone13,4": "128GB",
                "iPhone14,2": "128GB",
                "iPhone14,3": "128GB",
                "iPhone14,4": "128GB",
                "iPhone14,5": "128GB",
                "iPhone14,6": "64GB",
                "iPhone14,7": "128GB",
                "iPhone14,8": "128GB",
            }
            return model_mapping.get(product_type, "Unknown")
    except:
        pass
    return "Unknown"

def get_screen_info():
    try:
        product = get_device_info("ProductType")
        
        screen_db = {
            "iPhone12,8": "4.7\" IPS, 60Hz",
            "iPhone13,1": "5.4\" OLED, 60Hz",
            "iPhone13,2": "6.1\" OLED, 60Hz",
            "iPhone13,3": "6.1\" OLED, 120Hz",
            "iPhone13,4": "6.7\" OLED, 120Hz",
            "iPhone14,2": "6.1\" OLED, 120Hz",
            "iPhone14,3": "6.7\" OLED, 120Hz",
            "iPhone14,4": "5.4\" OLED, 60Hz",
            "iPhone14,5": "6.1\" OLED, 60Hz",
            "iPhone14,6": "4.7\" IPS, 60Hz",
            "iPhone14,7": "6.1\" OLED, 60Hz",
            "iPhone14,8": "6.7\" OLED, 60Hz",
            "iPhone15,2": "6.1\" OLED, 120Hz",
            "iPhone15,3": "6.7\" OLED, 120Hz",
        }
        
        return screen_db.get(product, "Unknown")
    except:
        return "Unknown"

def get_processor():
    try:
        product = get_device_info("ProductType")
        
        cpu_db = {
            "iPhone12,8": "A13 Bionic",
            "iPhone13,1": "A14 Bionic",
            "iPhone13,2": "A14 Bionic",
            "iPhone13,3": "A14 Bionic",
            "iPhone13,4": "A14 Bionic",
            "iPhone14,2": "A15 Bionic",
            "iPhone14,3": "A15 Bionic",
            "iPhone14,4": "A15 Bionic",
            "iPhone14,5": "A15 Bionic",
            "iPhone14,6": "A15 Bionic",
            "iPhone14,7": "A15 Bionic",
            "iPhone14,8": "A15 Bionic",
            "iPhone15,2": "A16 Bionic",
            "iPhone15,3": "A16 Bionic",
            "iPhone15,4": "A16 Bionic",
            "iPhone15,5": "A16 Bionic",
            "iPhone16,1": "A17 Pro",
            "iPhone16,2": "A17 Pro",
        }
        
        return cpu_db.get(product, get_device_info("CPUArchitecture"))
    except:
        return "Unknown"

def show_waiting():
    clear_screen()
    print_header()
    print(color("  Connect a device", 'white'))
    print(color("  fourtools, made with love <3", 'dim'))
    print("\n")

def show_device_info():
    global show_sensitive
    
    clear_screen()
    
    print("\n" + color("  ‚óè  ‚óè", 'gray'))
    print()
    
    device_name = get_device_info("DeviceName")
    ios_version = get_device_info("ProductVersion")
    
    print(color(f"  {device_name}", 'white'))
    
    storage = format_memory()
    print(color(f"  {storage}, iOS {ios_version}", 'dim'))
    
    print()
    print(color("  Components", 'gray'))
    print()
    
    cpu = get_processor()
    print(color("  ‚ñ™Ô∏é Processor", 'white') + color(f"  {cpu}", 'dim'))
    
    print(color("  ‚ñ™Ô∏é Memory", 'white') + color(f"     {storage}", 'dim'))
    
    screen = get_screen_info()
    print(color("  ‚ñ™Ô∏é Screen", 'white') + color(f"      {screen}", 'dim'))
    
    print()
    print(color("  Serial number, IMEI", 'gray'))
    print()
    
    serial = get_device_info("SerialNumber")
    if not show_sensitive:
        serial = mask_string(serial)
    print(color("  ‚ñ™Ô∏é Serial", 'white') + color(f"       {serial}", 'dim'))
    
    imei = get_device_info("InternationalMobileEquipmentIdentity")
    if not show_sensitive:
        imei = mask_string(imei)
    print(color("  ‚ñ™Ô∏é IMEI", 'white') + color(f"         {imei}", 'dim'))
    
    print()
    print(color("  Software", 'gray'))
    print()
    
    print(color("  ‚ñ™Ô∏é Jailbreak", 'white') + color("    N/A", 'dim'))
    
    print()
    print()
    
    if show_sensitive:
        print(color("  [h] ", 'cyan') + color("Hide Serial & IMEI", 'white'))
    else:
        print(color("  [s] ", 'cyan') + color("Show Serial & IMEI", 'white'))
    
    print(color("  [q] ", 'cyan') + color("Quit", 'white'))
    print()

def check_input():
    if select.select([sys.stdin], [], [], 0)[0]:
        return sys.stdin.read(1)
    return None

def main():
    global show_sensitive
    
    try:
        result = subprocess.run(['which', 'ideviceinfo'], 
                              capture_output=True, 
                              text=True)
        if not result.stdout.strip():
            print(color("\[!] libimobiledevice not installed!", 'red'))
            print(color("   [?] install it with: brew install libimobiledevice\n", 'yellow'))
            sys.exit(1)
    except:
        print(color("\n[!] cannot check for libimobiledevice\n", 'red'))
        sys.exit(1)
    
    os.system('stty -icanon -echo')
    
    device_connected = False
    
    print(color("\nüîß fourtools v0.1.1", 'cyan') + color(" - made with love <3\n", 'dim'))
    time.sleep(1)
    
    show_waiting()
    
    try:
        while True:
            try:
                is_connected = check_device()
                
                key = check_input()
                if key:
                    if key.lower() == 's':
                        show_sensitive = True
                        if device_connected:
                            show_device_info()
                    elif key.lower() == 'h':
                        show_sensitive = False
                        if device_connected:
                            show_device_info()
                    elif key.lower() == 'q':
                        break
                
                if is_connected and not device_connected:
                    device_connected = True
                    show_device_info()
                    
                elif not is_connected and device_connected:
                    device_connected = False
                    show_sensitive = False
                    show_waiting()
                
                time.sleep(0.1)
                
            except KeyboardInterrupt:
                break
                
    finally:
        os.system('stty icanon echo')
        clear_screen()

if __name__ == "__main__":
    main()
